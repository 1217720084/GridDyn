/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil;  eval: (c-set-offset 'innamespace 0); -*- */
/*
 * LLNS Copyright Start
 * Copyright (c) 2016, Lawrence Livermore National Security
 * This work was performed under the auspices of the U.S. Department
 * of Energy by Lawrence Livermore National Laboratory in part under
 * Contract W-7405-Eng-48 and in part under Contract DE-AC52-07NA27344.
 * Produced at the Lawrence Livermore National Laboratory.
 * All rights reserved.
 * For details, see the LICENSE file.
 * LLNS Copyright End
*/

#ifndef GRIDLINK_H_
#define GRIDLINK_H_

#include "gridObjects.h"
#include <queue>
class gridBus;  //tempory class definition
class gridDynSimulation;

#define APPROXIMATION_LEVELS (9)
/** @brief structure containing information on the states of the joining busses
@details included the voltages, angles and some common calculations used in calculating the flows
$Vmx=\frac{v1*v2}{tap}
the seqID is also the index of the state data it was calculated from*/
typedef struct linkInfo
{
  double v1 = 0.0;                                            //!< [p.u.] voltage at bus1
  double v2 = 0.0;                                            //!< [p.u.] voltage at bus2
  double theta1 = 0.0;                                //!<  angle at bus1
  double theta2 = 0.0;                                //!<  angle at bus2
  double cosTheta1 = 0.0;                             //!<  cos theta1
  double cosTheta2 = 0.0;                             //!<  cos theta2
  double sinTheta1 = 0.0;                             //!<  sin theta1
  double sinTheta2 = 0.0;                             //!<  sin theta2
  double Vmx = 0.0;                                           //!< computed parameter
  index_t  seqID = 0;
} linkI;

/** @brief structure containing information on the flows for the link
the seqID is also the index of the state data it was calculated from*/
typedef struct linkFlows
{
  double P1 = 0.0;                   //!< [p.u.] power transferred from bus 1
  double P2 = 0.0;                   //!< [p.u.] power transferred from bus 2
  double Q1 = 0.0;                   //!< [p.u.] reactive power transferred from bus 1
  double Q2 = 0.0;                   //!< [p.u.] reactive power transferred from bus 2
  index_t  seqID = 0;
} linkF;

/** @brief structure containing information on the partial derivatives for the the link
the seqID is also the index of the state data it was calculated from*/
typedef struct linkPartialDerivatives
{
  double dP1dv1 = 0.0;
  double dP2dv1 = 0.0;
  double dQ1dv1 = 0.0;
  double dQ2dv1 = 0.0;
  double dP1dv2 = 0.0;
  double dP2dv2 = 0.0;
  double dQ1dv2 = 0.0;
  double dQ2dv2 = 0.0;
  double dP1dt1 = 0.0;
  double dP2dt1 = 0.0;
  double dQ1dt1 = 0.0;
  double dQ2dt1 = 0.0;
  double dP1dt2 = 0.0;
  double dP2dt2 = 0.0;
  double dQ1dt2 = 0.0;
  double dQ2dt2 = 0.0;
  index_t  seqID = 0;
} linkPart;

/** @brief the class that links multiple nodes(busses) together
* @details the base class for objects which connect other obects mainly busses
it implements the basic transmission model

Each link has a disconnect switch at the from bus and the to bus
*/
class gridLink : public gridPrimary
{
  //friend class gridBus;
  friend class gridSimulation;
  friend class gridDynSimulation;
  friend class gridLinkOpt;
public:
  /** @brief define some basic flag locations for gridLink*/
  enum gridLink_flags
  {
    switch1_open_flag = object_flag1, //!<  switch for the from bus
    switch2_open_flag = object_flag2, //!< switch for the to bus
    fixed_target_power = object_flag3,  //!< flag indicating if the power flow was fixed
  };
  static count_t linkCount;         //!<static variable counting the number of created lines
  double ratingA = -kBigNum;                            //!< the long term rating of the link
  double ratingB = -kBigNum;                            //!< the short term rating of the link
  double Erating = -kBigNum;                            //!<the emergency rating of the link
  double minAngle = -kPI / 2.0;               //!<the minimum angle of the link can handle
  double maxAngle = kPI / 2.0;                //!<the maximum angle the link can handle--related to rating
protected:
  double length = 0.0;              //!< [km] transmission line length
  double r = 0;                     //!< [p.u.] per unit resistance
  double x = 0.00000001;                     //!< [p.u.] per unit reactance
  double mp_B = 0.0;                //!< [p.u.] per unit shunt capacitance (jb/2 on each end of the line)
  double mp_G = 0.0;                            //!< [p.u.] per unit shunt conductance (g/2 on each end of the line)
  double fault = -1.0;                  //!< fault location along the line keep at <0 for no fault
  double g = 0.0;                   //!< [p.u.] per unit conductance
  double b = 0.0;                   //!< [p.u.] per unit susceptance
  double tap = 1.0;                 //!< tap position, neutral t = 1;
  double tapAngle = 0.0;            //!< [deg] phase angle for phase shifting transformer

  linkI LinkInfo;                               //!< holder for the state computed link information
  linkI constLinkInfo;                                          //!< holder for static link bus information
  linkF LinkFlows;                                                      //!< holder latest computed power flow information
  linkF constLinkFlows;                                         //!< holder for previous steady state link flows
  linkPart LinkDeriv;                                           //!< holder for computed derivative information
  gridBus *B1 = nullptr;                //!< the bus on the from side
  gridBus *B2 = nullptr;                //!< the bus on the to side
  double Pset = 0;                //!< the scheduled power of the link

  //this is the wierdest C++ syntax for a typedef,  but as far as I can tell I need to do it to create a array of member function pointers still not clear how this actually works
  typedef void (gridLink::*glMP)();
  glMP flowCalc[APPROXIMATION_LEVELS];          //!< function pointers to power flow calculations
  glMP derivCalc[APPROXIMATION_LEVELS];          //!< function objects to the derivative calculations

public:
  /** @brief default constructor*/
  gridLink ();
  /** @brief constructor specifying the real and imaginary part of the impedance
  @param[in] rP  the real impedance in pu ohm
  @param[in] xP  the reactance in pu Ohm
  */
  gridLink (double rP, double xP);
  /** @brief virtual destructor*/
  virtual ~gridLink ();
  virtual gridCoreObject * clone (gridCoreObject *obj = nullptr) const override;

  virtual void disable () override;
  /** @brief reconnect the link*/
  virtual void reconnect ();
  //handle end switches
  /** @brief get the switch state
  * @return true if switch is open, false if closed
  */
  virtual bool switchTest () const
  {
    return (opFlags.test (switch1_open_flag) || opFlags.test (switch2_open_flag));
  }
  /** @brief get the switch state
  @param[in] num  the number of the switch 1 for "from" bus 2 for "to" bus
  * @return true if switch is open, false if closed
  */
  virtual bool switchTest (index_t num) const
  {
    return (num == 2) ? opFlags.test (switch2_open_flag) : opFlags.test (switch1_open_flag);
  }
  /** @brief set the switch state
  @param[in] num  the number of the switch 1 for "from" bus 2 for "to" bus
  @param[in] mode the mode of the switch true for open  false for closed
  */
  virtual void switchMode (index_t num, bool mode);
  /** @brief get the connectivity
  * @return true if there is a connection between the to and from bus
  */
  virtual bool isConnected () const override;
  /** @brief get the current tap value
  * @return the tap value
  */
  double getTap () const
  {
    return tap;
  }
  /** @brief get the current tap angle value
  * @return the tap angle value
  */
  double getTapAngle () const
  {
    return tapAngle;
  }
  /** @brief allow the real power flow to be fixed by adjusting the properties of one bus or another
  @details performs the calculations necessary to get the power at the mterminal to be a certain value
  @param[in] power  the desired real power flow as measured by mterminal
  @param[in] mterminal  the measrure terminal-either a terminal number (1 or higher) or a busID,  1 by default
  @param[in] fixedTerminal-the terminal that doesn't change (terminal number or busID) if 0 both are changed or 1 is selected based on busTypes
  @param[in] unitType -- the units related to power
  @return 0 for success, some other number for failure
  */
  virtual int fixRealPower (double power, index_t  mterminal, index_t  fixedTerminal = 0, gridUnits::units_t unitType = gridUnits::defUnit);
  /** @brief allow the power flow to be fixed by adjusting the properties of one bus or another
  @details performs the calculations necessary to get the power at the mterminal to be a certain value
  @param[in] rPower  the desired real power flow as measured by mterminal
  @param[in] rPower  the desired reactive power flow as measured by mterminal
  @param[in] mterminal  the measrure terminal-either a terminal number (1 or higher) or a busID,  1 by default
  @param[in] fixedTerminal-the terminal that doesn't change (terminal number or busID) if 0 both are changed or 1 is selected based on busTypes
  @param[in] unitType -- the units related to power
  @return 0 for success, some other number for failure
  */
  virtual int fixPower (double rPower, double qPower, index_t  mterminal, index_t  fixedTerminal = 0, gridUnits::units_t unitType = gridUnits::defUnit);
  /** @brief propogate a network number to all connected busses
  @details checks if a link actually connects the two busses in an AC sense, then checks if a bus is already part of the specified network and if not it adds it to the queue
  @param[in] network  the new network number
  @param[in] bstk a FIFO queue of busses to add to the network
  */
  virtual void followNetwork (int network, std::queue<gridBus *> &bstk);
  /** @brief update one of the link terminals with a new bus
  @param[in] bus  the new bus to connect to
  @param[in] busnumber  1 for from,  2 for "to"
  @return 0 for success, some other number for failure
  */
  virtual int updateBus (gridBus *bus,index_t busnumber);
  /** @brief check for any violations of link limits or other factors based on power flow results
  @details checks things like the maximum angle,  power flow /current limits based on ratings and a few other things
  @param[out] Violation_vector --a list of all the violations any new violations get added to the result
  */
  virtual void pFlowCheck (std::vector<violation> &Violation_vector) override;
  virtual void computePower () override;
  virtual void computePower (const stateData *sD,const solverMode &sMode) override;

  virtual double timestep (double ttime,const solverMode &sMode) override;
  /** @brief do a quick update  (may be deprecated)
  * @return the power transfer
  */
  virtual double quickupdateP ();
  /** @brief get the remaining capacity of the line
  * @return the remaining capacity
  */
  virtual double remainingCapacity () const;
  /** @brief get angle differential of the busses
  * @return the angle difference
  */
  virtual double getAngle () const;
  /** @brief get angle differential of the busses
  @param[in] state  the state of the system
  @param[in] sMode the solverMode the state is based on
  * @return the angle difference
  */
  virtual double getAngle (const double state[], const solverMode &sMode) const;
  /** @brief get the absolute angle of an attached bus
  @param[in] busId  either 1 or 2 or the object id of the bus
  * @return the absolute angle
  */
  virtual double getAbsAngle (index_t busId = 0) const;
  /** @brief get the voltage of an attached bus
  @param[in] busId  either 1 or 2 or the object id of the bus
  * @return the voltage
  */
  virtual double getVoltage (index_t  busId = 0) const;
  /** @brief get the real perceived impedance at a particular bus
  @param[in] busId  either 1 or 2 or the object id of the bus
  * @return the perceived impedance
  */
  virtual double getRealImpedance (index_t  busId = 0) const;
  /** @brief get the imaginary part of the perceived impedance at a particular bus
  @param[in] busId  either 1 or 2 or the object id of the bus
  * @return the perceived imaginary component of the impedance
  */
  virtual double getImagImpedance (index_t  busId = 0) const;
  /** @brief get the magnitude of the perceived impedance at a particular bus
  @param[in] busId  either 1 or 2 or the object id of the bus
  * @return the magnitude of the perceived impedance, sign indicated flow direction of the real current
  */
  virtual double getTotalImpedance (index_t  busId = 0) const;
  /** @brief get the magnitude of the current at a particular bus
  @param[in] busId  either 1 or 2 or the object id of the bus
  * @return the magnitude of the current, sign indicated flow direction of the real current
  */
  virtual double getCurrent (index_t  busId = 0) const;
  /** @brief get the real part of the current at a particular bus
  @param[in] busId  either 1 or 2 or the object id of the bus
  * @return the real part of the current
  */
  virtual double getRealCurrent (index_t  busId = 0) const;
  /** @brief get the imaginary part of the current at a particular bus
  @param[in] busId  either 1 or 2 or the object id of the bus
  * @return the imaginary part of the current
  */
  virtual double getImagCurrent (index_t  busId = 0) const;
  /** @brief get the real power at a particular bus
  @details this function is to allow a link to act similarly to a gridSecondary
  @param[in] busId  either 1 or 2 or the object id of the bus
  * @return the real Power
  */
  virtual double getRealPower (index_t  busId = 0) const;
  /** @brief get the real power at a particular bus
  @details this function is to allow a link to act similarly to a gridSecondary
  @param[in] busId  either 1 or 2 or the object id of the bus
  * @return the real Power
  */
  virtual double getReactivePower (index_t  busId = 0) const;
  /** @brief get the loss of a line
  * @return the loss in pu
  */
  virtual double getLoss () const;
  /** @brief get reactive power consumed by the link
  * @return the reactive power consumption
  */
  virtual double getReactiveLoss () const;
  /** @brief get the number of terminals
  * @return the number of terminals
  */
  virtual count_t terminalCount () const
  {
    return 2;
  }
  /** @brief get the max transfer capacity
  * @return the max capacity
  */
  virtual double getMaxTransfer () const;

  virtual void getParameterStrings (stringVec &pstr, paramStringType pstype) const override;
  virtual double get (const std::string &param, gridUnits::units_t unitType = gridUnits::defUnit) const override;
  virtual int set (const std::string &param,  const std::string &val) override;
  virtual int set (const std::string &param, double val, gridUnits::units_t unitType = gridUnits::defUnit) override;

  gridBus * getBus (index_t busInd)  const override;

  gridCoreObject * getSubObject (const std::string &typeName, index_t num) const override;


  // initializeB power flow
protected:
  virtual void pFlowObjectInitializeA (double time0, unsigned long flags) override;
public:
  /** @brief check if two busses should be merged and the line effects ignored
  */
  virtual void checkMerge ()
  {
  }
  //initializeB dynamics
protected:
  virtual void dynObjectInitializeA (double time0, unsigned long flags) override;
public:
  //for computing all the jacobian elements at once

  virtual void ioPartialDerivatives (index_t  busId, const stateData *sD, arrayData<double> *ad, const IOlocs &argLocs, const solverMode &sMode);
  
  virtual void outputPartialDerivatives (const stateData *sD, arrayData<double> *ad, const solverMode &sMode)override;
  virtual void outputPartialDerivatives (index_t  busId, const stateData *sD, arrayData<double> *ad, const solverMode &sMode);

  //virtual void busResidual(index_t busId, const stateData *sD, double *Fp, double *Fq, const solverMode &sMode);
  virtual IOdata getOutputs (const stateData *sD, const solverMode &sMode) override;
  virtual IOdata getOutputs (index_t busId, const stateData *sD, const solverMode &sMode);
  virtual void setState (double ttime, const double state[], const double dstate_dt[], const solverMode &sMode) override;

  virtual change_code rootCheck (const stateData *sD, const solverMode &sMode, root_check_level level) override;


  friend bool compareLink (gridLink *lnk1, gridLink *lnk2,bool cmpBus,bool printDiff);
protected:
  void setAdmit ();
  // virtual void basePowerComp ();
  /** @brief calculations for fault conditions
  */
  void faultCalc ();
  /** @brief full ac calculations
  */
  void fullCalc ();
  /** @brief assumes r is small and can be ignored
  */
  void simplifiedCalc ();
  /** @brief assumes there is no coupling between P -theta and V-Q
  */
  void decoupledCalc ();
  /** @brief assumes the r is small and decoupled
  */
  void simplifiedDecoupledCalc ();
  /** @brief assumes the angle is small
  */
  void smallAngleCalc ();
  /** @brief assumes the angle is small and r is small
  */
  void smallAngleSimplifiedCalc ();
  /** @brief small angle decoupled
  */
  void smallAngleDecoupledCalc ();
  /** @brief linearizes computations around previous operating point
  */
  void linearCalc ();
  /** @brief computes the values for nonConnected line
  */
  void swOpenCalc ();
  /** @brief assumes r is small and the angle is small and the voltage is constant for real power computation and angle is constant for reactive power computation
  so there is no cross coupling between V and theta*/
  void fastDecoupledCalc ();
  /** @brief  fault Derivative Calculations
  */
  void faultDeriv ();
  /** @brief  full ac calculations for partial derivatives
  */
  void fullDeriv ();
  /** @brief assumes r is small and can be ignored for partial derivatives
  */
  void simplifiedDeriv ();
  /** @brief assumes there is no coupling between P -theta and V-Q for partial derivatives
  */
  void decoupledDeriv ();
  /** @brief assumes the r is small and decoupled
  */
  void simplifiedDecoupledDeriv ();
  /** @brief assumes the angle is small
  */
  void smallAngleDeriv ();
  /** @brief small angle decoupled
  */
  void smallAngleDecoupledDeriv ();
  /** @brief assumes the angle is small and r is small
  */
  void smallAngleSimplifiedDeriv ();
  /** @brief linearizes computations around previous operating point
  */
  void linearDeriv ();
  /** @brief assumes r is small and the angle is small and the voltage is constant for real power computation and angle is constant for reactive power computation
  so there is no cross coupling between V and theta for partial derivatives*/
  void fastDecoupledDeriv ();
  /** @brief switch open derivatives*/
  void swOpenDeriv ();
  /** @brief load information into the linkInfo structure*/
  void loadLinkInfo ();
  /** @brief load information into the linkInfo structure
  @param[in] sD  the state Data
  @param[in] sMode the corresponding solver Mode*/
  void loadLinkInfo (const stateData *sD, const solverMode &sMode);
  /** @brief load the approximation functions in the bizarely defined array above*/
  void loadApproxFunctions ();
};
/** @brief find the matching link in a different tree
@details  searches a cloned object tree to find the corresponding link
@param[in] bus  the link to search for
@param[in] src  the existing parent object
@param[in] sec  the desired parent object tree
@return a pointer to a link on the second tree that matches the calling link based on name and location
*/
gridLink * getMatchingLink (gridLink *lnk, gridPrimary *src, gridPrimary *sec);

/** @brief extends the link class to include adjustments to the tap and tapAngle
* @details principally a model for adjustable transformers such as ULTC or regulators or other types of transformers with
adjustments.
it implements three types of control in power flow voltage control of local or remote busses,  local reactive power flow, and local real power flow
the real power flow is the only one that adjusts the angle.  available control include stepped and continuous

*/
class adjustableTransformer : public gridLink
{
public:
  /** @brief  enumeration of the available control types
  */
  enum class control_mode_t
  {
    manual_control = 0, //!< no automatic adjustments
    voltage_control = 1,    //!< automatic control based on voltage
    MW_control = 2,     //!< automatic control based on real power flow at a specific terminal
    MVar_control = 3     //!<automatic control based on real power flow at a specific terminal
  };
  /** @brief  flags for
  */
  enum adjustable_flags
  {
    continuous_flag = object_flag5,  //!< flag indicating continuous adjustments
    use_target_mode = object_flag6,  //!< flag indicating target mode
    at_limit = object_flag7,                    //!< flag indicating the adjustments are at their limit
    no_pFlow_adjustments = object_flag8,  //!< flag turning off all automatic adjustments
    use_lookup_table = object_flag9,   //!< flag indicating use of an impedance lookup table
  };

protected:
  control_mode_t cMode = control_mode_t::manual_control;  //!< control Mode
  double stepSize = 0.01;  //!< step size of the adjustment for non-continuous adjustments
  double maxTapAngle = kPI / 4.0;  //!< maximum tap angle
  double minTapAngle = -maxTapAngle; //!< minimum tap angle
  double minTap = 0.9;  //!< minimum tap setting
  double maxTap = 1.1;  //!< maximum tap setting
  double Vtarget = -kBigNum; //!< target voltage
  double Vmax = kBigNum;  //!< maximum voltage before changing the tap
  double Vmin = 0;  //!< minimum voltage before changing the tap

  double Ptarget = -kBigNum;  //!< the target power flow
  double Pmin = -kBigNum;  //!< the minimum power level before changing the tap
  double Pmax = kBigNum;  //!< the maximum power before changing the tap

  double Qtarget = -kBigNum;  //!< the target reactive power flow
  double Qmax = kBigNum;  //!< the minimum power level before changing the tap
  double Qmin = -kBigNum;  //!< the maximum power before changing the tap
  // double Tm;				//!< time constant
  // double Td;				//!< time constant
  double direction = 1;         //!< variable storing whether the directional derivate of the tap changes with respect to voltage or power is positive or negative
  double tapMaxChangeRate;              //!<maximum rate at which the tap can change
  double sample_rate;           //!< the rate at which the measurements are sampled
  gridBus *controlBus = nullptr;  //!< the control bus to monitor voltage

  double tap0;        //!< baseline tap position used for continuous tap settings
  double tapAngle0;  //!< baseline tapAngle position used for continuous tap settings
  double stepDelay = 30;  //<! step control for adjusting the quantity or the time constant for continuous system
  double mp_Tm = 0.05;          //!< time constant for continous tap settings
  double dTapdt = 0; //<! rate of change of the tap
  double dTapAdt = 0; //<! rate of change of the tapAngle
private:
  int controlNum = -1;  //!< the control bus and number setting are not fully determined until initialization so this stores information from the startup phase
  std::string controlName; //!< the control bus and number setting are not fully determined until initialization so this stores information from the startup phase
  count_t adjCount;
  count_t oCount;
  double prevAdjust;
  double prevValue;
  //double baseValue;
public:
  /** @brief default constructor
  @param[in] rP  resistance of the link
  @param[in] xP  reactance of the link forwarded to the gridLink constructor
  */
  adjustableTransformer (double rP = 0, double xP = 0);
  //!< @brief destructor
  ~adjustableTransformer ()
  {
  }
  gridCoreObject * clone (gridCoreObject *obj = nullptr) const override;

  virtual void getParameterStrings (stringVec &pstr, paramStringType pstype) const override;
  int set (const std::string &param,  const std::string &val) override;
  int set (const std::string &param, double val, gridUnits::units_t unitType = gridUnits::defUnit) override;

  //adjuster specific functions
  /**@ brief set the control bus to a specified bus pointer
  @param[in] cBus  the specified control Bus*/
  void setControlBus (gridBus *cBus);
  /**@ brief set the control bus to a specified bus number
  @param[in] busnumber-- this can be 1 or 2 for already attached busses or the user id of a bus in which cases the parent of the link is searched for the bus*/
  void setControlBus (index_t  busnumber = 2);


  change_code powerFlowAdjust (unsigned long flags, int level) override;
  void reset (reset_levels level) override;

  void computePower () override;
  void computePower (const stateData *sD, const solverMode &sMode) override;

  virtual IOdata getOutputs (index_t  busId, const stateData *sD, const solverMode &sMode) override;

  void jacobianElements (const stateData *sD, arrayData<double> *ad, const solverMode &sMode) override;
  //for computing all the jacobian elements at once
  virtual void ioPartialDerivatives (index_t  busId, const stateData *sD, arrayData<double> *ad, const IOlocs &argLocs, const solverMode &sMode) override;
  virtual void outputPartialDerivatives  (index_t  busId, const stateData *sD, arrayData<double> *ad, const solverMode &sMode) override;

  void residual (const stateData *sD, double resid[], const solverMode &sMode) override;
  void setState (double ttime, const double state[], const double dstate_dt[], const solverMode &sMode) override;
  void guess (double ttime, double state[], double dstate_dt[], const solverMode &sMode) override;
  void loadSizes (const solverMode &sMode, bool dynOnly) override;
protected:
  void pFlowObjectInitializeA (double time0, unsigned long flags) override;
  void dynObjectInitializeA (double time0, unsigned long flags) override;

public:
  void rootTest (const stateData *sD, double roots[], const solverMode &sMode) override;
  void rootTrigger (double ttime, const std::vector<int> &rootMask, const solverMode &sMode) override;
  virtual void followNetwork (int network, std::queue<gridBus *> &bstk) override;
  virtual void getStateName (stringVec &stNames, const solverMode &sMode, const std::string &prefix = "") const override;
protected:
  /** @brief compute the jacobian elements based on the MW control
  @param[in] sD  the statedata of the current state of the system
  @param[out] ad the arrayData object to store the jacobian information
  @param[in]  the solverMode corresponding to the stateData
  */
  void MWJac (const stateData *sD, arrayData<double> *ad, const solverMode &sMode);
  /** @brief compute the jacobian elements based on the MVar control
  @param[in] sD  the statedata of the current state of the system
  @param[out] ad the arrayData object to store the jacobian information
  @param[in]  the solverMode corresponding to the stateData
  */
  void MVarJac (const stateData *sD, arrayData<double> *ad, const solverMode &sMode);
  /** @brief compute the partial derivatives of the power flows based on the tap angle
  @param[in] busId the id of the calling bus either 1 or 2 or a busID of one of the attached busses
  @param[in] sD  the statedata of the current state of the system
  @param[out] ad the arrayData object to store the jacobian information
  @param[in]  the solverMode corresponding to the stateData
  */
  void tapAnglePartial (index_t  busId, const stateData *sD, arrayData<double> *ad, const solverMode &sMode);
  /** @brief compute the partial derivatives of the power flows based on the tap setting
  @param[in] busId the id of the calling bus either 1 or 2 or a busID of one of the attached busses
  @param[in] sD  the statedata of the current state of the system
  @param[out] ad the arrayData object to store the jacobian information
  @param[in]  the solverMode corresponding to the stateData
  */
  void tapPartial (index_t busId, const stateData *sD, arrayData<double> *ad, const solverMode &sMode);
  /** @brief do any stepped adjustments  based on voltage control from the power flow calculations
  @return change_code::no_change if nothing was done,  PARAMETER_ADJUSTMENT if the tap changer was stepped
  */
  change_code voltageControlAdjust ();
  /** @brief do any stepped adjustments  based on MW control from the power flow calculations
  @return change_code::no_change if nothing was done,  PARAMETER_ADJUSTMENT if the tap changer was stepped
  */
  change_code MWControlAdjust ();
  /** @brief do any stepped adjustments  based on MVAR control from the power flow calculations
  @return change_code::no_change if nothing was done,  PARAMETER_ADJUSTMENT if the tap changer was stepped
  */
  change_code MVarControlAdjust ();
};


/** @brief compare 2 links
@details  check a number of link parameters to see if they match, probably not that useful of function any more ,but it was useful during development
@param[in] lnk1  the first link to check
@param[in] lnk2  the second link to check
@param[in] cmpBus  whether to compare links or not  (deep comparison of links)
@param[in] printDiff  true if the diffs are to be printed
@return true if match
*/
bool compareLink (gridLink *lnk1, gridLink *lnk2, bool cmpBus = false, bool printDiff = false);
#endif
